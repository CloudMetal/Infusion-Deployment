@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");

    Script.Require("jQuery");
            using (Script.Head())
    { 
        <meta name="viewport" content="width=device-width, initial-scale=1" /> 
    }
   
    Style.Include("http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css");
    Script.Include("http://code.jquery.com/jquery-1.7.1.min.js").AtHead();
    Script.Include("http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js").AtHead();
    Style.Include("bootstrap.css");
    Script.Include("bootstrap.min.js");
   Style.Include("Infusion.css");    
        
    /* Prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout";
    Model.Attributes.Add("data-role", "page");

    // Set jqm swatch (a, b, c, d, e)
    Model.Attributes.Add("data-theme", "a");
    
    /* Store each page in a variable for conditionals
    ***************************************************************/

    var isProfilePage = HttpContext.Current.Request.Url.AbsolutePath.StartsWith("/");
    var currentUrl = Request.Url.AbsoluteUri;
    var isOrigin = HttpContext.Current.Request.Url.AbsolutePath.EndsWith("/");


    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones


    /* Get image path for images
    ***************************************************************/
    var ImgPath = Url.Content("~/Themes/InfusionMobile/Content/Images/");

    /* Inserting some ad hoc shapes
    ***************************************************************/
    /*WorkContext.Layout.Header.Add(New.Branding(), "1"); // Site name and link to the home page  ***/  

    WorkContext.Layout.Header.Add(New.User(), "8"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var mainDivClass = string.Empty; // creating a string variable to hold the class name to add if AsideFirst is not null

}
@tag.StartElement


<div class="ui-title-bar-a">
            

<h1 class="ui-title" role="heading" aria-level="1">@Layout.Title</h1>

<div class="nav-collapse">
    <ul class="nav jq-dropdown-nav">
        <li class="dropdown">
            @if (WorkContext.CurrentUser != null)
            {
                dynamic user = WorkContext.CurrentUser.ContentItem;
                List<string> roles = user.UserRolesPart.Roles;
        
                <a href="#" class="dropdown-toggle" data-toggle="dropdown"><b class="caret"></b></a>
                

<ul class="dropdown-menu">
     @Display(Model.Navigation)              <li>@Html.ActionLink(T("Change Password").ToString(), "ChangePassword", new { Controller = "Account", Area = "Orchard.Users" })</li>
                    <li>@Html.ActionLink(T("Sign Out").ToString(), "LogOff", new { Controller = "Account", Area = "Orchard.Users", ReturnUrl = Context.Request.RawUrl })</li>
                    @if (AuthorizedFor(Orchard.Security.StandardPermissions.AccessAdminPanel))
                    {
                        <li class="divider"></li>
                        <li>@Html.ActionLink(T("Dashboard").ToString(), "Index", new { Area = "Dashboard", Controller = "Admin" })</li>
                    }
                </ul>
            }
            else
            {
                @Html.ActionLink(T("Sign In").ToString(), "LogOn", new { Controller = "Account", Area = "Orchard.Users", ReturnUrl = (Request.QueryString["ReturnUrl"] ?? Request.RawUrl) })
            }
        </li>
    </ul>
</div>

</div>
<div data-role="header">

<div class="main-search-title">WHAT DO YOU NEED?</div>
@using (Html.BeginForm("index", "search", new { area = "Orchard.Search" }, FormMethod.Get, new { @class = "navbar-search" }))
{
    <input type="search" name="search-mini" id="search-mini" data-mini="true" value="">}
</div><!-- /header -->

<div data-role="content">
    
    @if (Model.Messages != null) {
        <div id="messages">
            @Display(Model.Messages)
        </div>
    }
    @if (Model.Content != null) {
        <div id="content">	
	        @Display(Model.Content)	
        </div>
    }
</div><!-- /content -->

<div data-role="footer">
    @if (Model.Footer != null)
    {
	    @Display(Model.Footer)	
    }

    @Display(New.BadgeOfHonor())
    
</div><!-- /footer -->

@tag.EndElement    
